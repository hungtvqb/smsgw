#Sat, 25 Nov 2017 00:36:27 +0700
<?xml=version\="1.0" encoding\="UTF-8"?>
<!--=
<project=name\="MPSSMSGW" default\="default" basedir\=".">














    </target>
</project>=

<description>Builds,=tests, and runs the project MPSSMSGW.</description>
<import=file\="nbproject/build-impl.xml"/>
There=exist several targets which are by default empty and which can be 
used=for execution of your tasks. These targets are usually executed 
before=and after some main targets. They are\: 
-pre-init=called before initialization of project properties
-post-init=called after initialization of project properties
-pre-compile=called before javac compilation
-post-compile=called after javac compilation
-pre-compile-single=called before javac compilation of single file
-post-compile-single=called after javac compilation of single file
-pre-compile-test=called before javac compilation of JUnit tests
-post-compile-test=called after javac compilation of JUnit tests
-pre-compile-test-single=called before javac compilation of single JUnit test
-post-compile-test-single=called after javac compilation of single JUunit test
-pre-jar=called before JAR building
-post-jar=called after JAR building
-post-clean=called after cleaning build products
(Targets=beginning with '-' are not intended to be called on their own.)
Example=of inserting an obfuscator after compilation could look like this\:
<target=name\="-pre-jar" > 
<obfuscate>=
<fileset=dir\="${build.classes.dir}"/>
</obfuscate>=
</target>=
For=list of available properties check the imported 
nbproject/build-impl.xml=file. 
Another=way to customize the build is by overriding existing main targets.
The=targets of interest are\: 
-init-macrodef-javac=defines macro for javac compilation
-init-macrodef-junit=defines macro for junit execution
-init-macrodef-debug=defines macro for class debugging
-init-macrodef-java=defines macro for class execution
-do-jar-with-manifest=JAR building (if you are using a manifest)
-do-jar-without-manifest=JAR building (if you are not using a manifest)
run=execution of project 
-javadoc-build=Javadoc generation
test-report=JUnit report generation
An=example of overriding the target for project execution could look like this\:
<exec=dir\="bin" executable\="launcher.exe">
<arg=file\="${dist.jar}"/>
</exec>=
Notice=that the overridden target depends on the jar target and not only on 
the=compile target as the regular run target does. Again, for a list of available 
properties=which you can use, check the target you are overriding in the
-->=
<propertyfile=file\="${src.dir}smsgwversion.properties"> 
<entry=key\="BUILD-DATE" value\="now" type\="date" pattern\="yyyy/MM/dd HH\:mm"/>
</propertyfile>=
BUILD=16
BUILD-DATE=2017/11/25 00\:36
